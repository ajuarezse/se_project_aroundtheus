!function(){"use strict";class e{constructor(e,t,s,r,i){let{name:o,link:n,_id:l,isLiked:a,userId:d}=e;this._name=o,this._link=n,this._id=l,this._isLiked=a,this._userId=d,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteClick=r,this._handleLikeClick=i}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>{this._handleLikeClick(this._id,this)})),this._cardElement.querySelector(".card__button-trash").addEventListener("click",(()=>{this._handleDeleteClick(this._id,this)})),this._cardElement.querySelector(".card__image").addEventListener("click",(()=>{this._handleImageClick({name:this._name,link:this._link})}))}updateLikes(e){const t=this._cardElement.querySelector(".card__like-button");this._isLiked?t.classList.add("card__like-button_active"):t.classList.remove("card__like-button_active"),this._isLiked=!this._isLiked}getView(){this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0);const e=this._cardElement.querySelector(".card__image");return this._cardElement.querySelector(".card__title").textContent=this._name,e.src=this._link,e.alt=this._name,this.updateLikes(this._likes),this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._form=t,this._inputEls=Array.from(this._form.querySelectorAll(this._inputSelector)),this._submitButton=this._form.querySelector(this._submitButtonSelector)}_showInputError(e){this.errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.add(this._inputErrorClass),this.errorMessageEl.textContent=e.validationMessage,this.errorMessageEl.classList.add(this._errorClass)}_hideInputError(e){this.errorMessageEl=this._form.querySelector(`#${e.id}-error`),e.classList.remove(this._inputErrorClass),this.errorMessageEl.textContent="",this.errorMessageEl.classList.remove(this._errorClass)}_checkInputValidity(e){e.validity.valid?this._hideInputError(e):this._showInputError(e)}_hasInvalidInput(){return this._inputEls.some((e=>!e.validity.valid))}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}toggleButtonState(){this._hasInvalidInput()?this.disableButton():this._enableButton()}_setEventListeners(){this._inputEls.forEach((e=>{e.addEventListener("input",(t=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault(),this.disableButton()})),this._setEventListeners(),this.toggleButtonState()}resetValidation(){this.toggleButtonState(),this._inputEls.forEach((e=>{this._hideInputError(e)})),this.toggleButtonState()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose=e=>{"Escape"===e.key&&this.close()};setEventListeners(){this._popupElement.querySelector(".modal__close").addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{e.target.classList.contains("modal_opened")&&this.close()}))}}const r={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__span_opened"},i=(document.querySelectorAll(r.formSelector),document.querySelector("#profile-edit-button")),o=document.querySelector("#profile-edit-modal"),n=(o.querySelector(".modal__close"),document.querySelector(".profile__title"),document.querySelector(".profile__description"),document.querySelector("#profile-title-input")),l=document.querySelector("#profile-description-input"),a=document.querySelector(".profile__add-button"),d=document.querySelector("#add-card-modal"),c=(document.querySelector("#add-card-close-button"),o.querySelector(".modal__form")),u=(document.querySelector(".cards__list"),document.querySelector("#card-template").content.firstElementChild,d.querySelector(".modal__form"));document.querySelector("#modal-preview"),document.querySelector(".modal__image"),document.querySelector(".modal__preview-title"),document.querySelector("#preview-image-close"),u.querySelector(".modal__input_type_title"),u.querySelector(".modal__input_type_url");class h extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputElements=Array.from(this._popupForm.querySelectorAll(".modal__input")),this._submitButton=this._popupElement.querySelector(".modal__button"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputElements.forEach((t=>{e[t.name]=t.value})),e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues()),this.close()}))}close(){super.close(),this._popupForm.reset()}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";this._submitButton.textContent=e?t:this._submitButtonText}}const _=new class{constructor(e){let{titleSelector:t,descriptionSelector:s,avatarSelector:r}=e;this._profileTitle=document.querySelector(t),this._profileDescription=document.querySelector(s),this._avatar=document.querySelector(r)}getUserInfo(){return{title:this._profileTitle.textContent,description:this._profileDescription.textContent}}setUserInfo(e){let{title:t,description:s}=e;this._profileTitle.textContent=t,this._profileDescription.textContent=s}setUserAvatar(e){let{avatar:t}=e;this._avatar.src=t}}({titleSelector:".profile__title",descriptionSelector:".profile__description",avatarSelector:".profile__image"}),p=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._handleResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._handleResponse)}updateProfileInfo(e){let{name:t,description:s}=e;return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:t,about:s})}).then(this._handleResponse)}addCard(e){let{name:t,link:s}=e;return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:t,link:s})}).then(this._handleResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._handleResponse)}unlikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._handleResponse)}updateProfileAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._handleResponse)}getAppData(){return Promise.all([this.getUserInfo(),this.getInitialCards()])}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"b67d986e-405b-4d76-86b9-0a516353ed7d","Content-Type":"application/json"}}),m=new h("#edit-avatar-modal",(function(e){m.renderLoading(!0),p.updateProfileAvatar(e.url).then((e=>{_.setUserAvatar(e),m.close()})).catch(console.error).finally((()=>{m.renderLoading(!1)}))}));m.setEventListeners();const E=document.forms["avatar-form"],S=document.querySelector(".profile__avatar-button"),v=new t(r,E);let f;v.enableValidation(),S.addEventListener("click",(()=>{m.open(),v.resetValidation()})),p.getAppData().then((e=>{let[t,s]=e;_.setUserInfo({title:t.name,description:t.about}),_.setUserAvatar({avatar:t.avatar}),f=t._id,g.setItems(s),g.renderItems()})).catch(console.error);const y=new class extends s{constructor(e){super({popupSelector:e}),this._imageElement=this._popupElement.querySelector(".modal__image"),this._imageTitle=this._popupElement.querySelector(".modal__preview-title")}open(e){this._imageElement.src=e.link,this._imageElement.alt=e.name,this._imageTitle.textContent=e.name,super.open()}}("#modal-preview");y.setEventListeners();const b=new h("#profile-edit-modal",(function(e){p.updateProfileInfo({name:e.title,description:e.description}).then((e=>{_.setUserInfo({title:e.name,description:e.about}),b.close()})).catch(console.error)}));b.setEventListeners();const k=new class extends s{constructor(e){let{popupSelector:t}=e;super({popupSelector:t}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupButton=this._popupElement.querySelector(".modal__button")}handleDeleteConfirm(e){this._handleDeleteConfirm=e}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteConfirm()}))}}({popupSelector:"#delete-card-modal"});k.setEventListeners(),i.addEventListener("click",(()=>{const e=_.getUserInfo();n.value=e.title,l.value=e.description,b.open(),q.resetValidation()}));const L=new h("#add-card-modal",(function(e){const{title:t,url:s}=e;p.addCard({name:t,link:s}).then((e=>{C({name:e.name,link:e.link,id:e._id,likes:e.likes,userId:f}),L.close()})).catch(console.error)}));function C(t){const s=function(t){return new e(t,"#card-template",(e=>{y.open(e)}),B,w).getView()}(t);g.addItem(s)}L.setEventListeners(),a.addEventListener("click",(()=>{L.open()}));const g=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}setItems(e){this._items=e}}({items:[],renderer:C},".cards__list"),q=new t(r,c),I=new t(r,d);function B(e,t){k.open(),k.handleDeleteConfirm((()=>{p.deleteCard(e).then((()=>{t.remove(),k.close()})).catch(console.error)}))}function w(e,t){t._isLiked?p.likeCard(e).then((e=>{t.updateLikes(e.likes)})).catch(console.error):p.unlikeCard(e).then((e=>{t.updateLikes(e.likes)})).catch(console.error)}q.enableValidation(),I.enableValidation()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,